@model DateTime?
@{
  var inputClass = "";
  var controlGroupClass = "control-group";
  var propertyName = ViewData.ModelMetadata.PropertyName;
  var propertyState = ViewData.ModelState[propertyName];
  if (propertyState == null)
  {
    foreach (var key in ViewData.ModelState.Keys)
    {
      if (key.EndsWith("." + propertyName))
      {
        propertyState = ViewData.ModelState[key];
        break;
      }
    }
  }
  var placeholder = ViewData.ModelMetadata.DisplayName ?? ViewData.ModelMetadata.PropertyName;
  if (ViewData.ContainsKey("placeholder"))
  {
    placeholder = ViewData["placeholder"].ToString();
  }
  if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("InputClass"))
  {
    inputClass = ViewData.ModelMetadata.AdditionalValues["InputClass"].ToString();
  }
  if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("Placeholder"))
  {
    placeholder = ViewData.ModelMetadata.AdditionalValues["Placeholder"].ToString();
  }
  if (propertyState != null && propertyState.Errors.Any())
  {
    controlGroupClass += " error";
  }
}
<div class="@controlGroupClass">
  @Html.LabelFor(m => m, new { @class = "control-label" })
  <div class="controls">
    @Html.TextBoxFor(m => m, new { @class = @inputClass, placeholder })
    @if (!ViewData.ModelState.IsValid)
    {
      <p class="help-block">@Html.ValidationMessageFor(m => m)</p>
    }
    else if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("HelpBlock"))
    {
      <p class="help-block">@ViewData.ModelMetadata.AdditionalValues["HelpBlock"].ToString()</p>
    }
    @if (ViewData.ContainsKey("helplink") && ViewData.ContainsKey("helptext"))
    {
      <br/>
      <a href="@ViewData["helplink"]" class="@ViewData["helplinkclass"]" data-placement="@ViewData["helplinkplacement"]" data-toggle="@ViewData["helplinktoggle"]" data-original-title="@ViewData["helplinkoriginaltitle"]">
        @ViewData["helptext"]
      </a>
    }
  </div>
</div>
